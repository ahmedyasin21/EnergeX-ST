name: Django CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ development ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: energex
          MYSQL_USER: energex_user
          MYSQL_PASSWORD: secret
        ports:
          - 3306:3306
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run Django migrations
        run: |
          source .venv/bin/activate
          python backend/manage.py migrate

      - name: Run Django tests
        run: |
          source .venv/bin/activate
          python backend/manage.py test

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker images
        run: |
          docker-compose -f docker-compose.yml build

      # Optional: Push to DockerHub
      - name: Push Docker images
        run: |
          docker-compose -f docker-compose.yml push

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Example: Deploy to remote server via SSH
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /path/to/project
            docker-compose pull
            docker-compose up -d